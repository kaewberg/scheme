(define-library (scheme-impl derived-expressions)
(import (scheme-impl base))
(export cond case and or when unless)
(export let let* letrec letrec* let-values let*-values define-values)
(export begin do)
(export delay-force make-promise promise-done? promise-value promise-update!)
(export make-parameter)

(begin

(define-syntax cond
  (syntax-rules (else =>)
    ((cond (else result1 result2 ...))
     (begin result1 result2 ...))
    ((cond (test => result))
     (let ((temp test))
        (if temp (result temp))))
    ((cond (test => result) clause1 clause2 ...)
     (let ((temp test))
        (if temp
          (result temp)
          (cond clause1 clause2 ...))))
    ((cond (test)) test)
    ((cond (test) clause1 clause2 ...)
     (let ((temp test))
        (if temp
          temp
          (cond clause1 clause2 ...))))
    ((cond (test result1 result2 ...))
     (if test (begin result1 result2 ...)))
    ((cond (test result1 result2 ...) clause1 clause2 ...)
    (if test
      (begin result1 result2 ...)
      (cond clause1 clause2 ...)))))

(define-syntax case
  (syntax-rules (else =>)
    ((case (key ...) clauses ...)
     (let ((atom-key (key ...)))
        (case atom-key clauses ...)))
    ((case key (else => result))
      (result key))
    ((case key (else result1 result2 ...))
      (begin result1 result2 ...))
    ((case key ((atoms ...) result1 result2 ...))
      (if (memv key '(atoms ...))
        (begin result1 result2 ...)))
    ((case key ((atoms ...) => result))
      (if (memv key '(atoms ...))
        (result key)))
    ((case key ((atoms ...) => result) clause clauses ...)
      (if (memv key '(atoms ...))
        (result key)
        (case key clause clauses ...)))
    ((case key ((atoms ...) result1 result2 ...) clause clauses ...)
      (if (memv key '(atoms ...))
        (begin result1 result2 ...)
        (case key clause clauses ...)))))

(define-syntax and
  (syntax-rules ()
    ((and) #t)
    ((and test) test)
    ((and test1 test2 ...)
      (if test1 (and test2 ...) #f))))

(define-syntax or
  (syntax-rules ()
    ((or) #f)
    ((or test) test)
    ((or test1 test2 ...)
     (let ((x test1))
        (if x x (or test2 ...))))))

(define-syntax when
  (syntax-rules ()
    ((when test result1 result2 ...)
      (if test
        (begin result1 result2 ...)))))

(define-syntax unless
  (syntax-rules ()
    ((unless test result1 result2 ...)
      (if (not test)
        (begin result1 result2 ...)))))

(define-syntax let
  (syntax-rules ()
    ((let ((name val) ...) body1 body2 ...)
      ((lambda (name ...) body1 body2 ...) val ...))
    ((let tag ((name val) ...) body1 body2 ...)
      ((letrec ((tag (lambda (name ...) body1 body2 ...))) tag) val ...))))

(define-syntax letrec-syntax
  (syntax-rules ()
    ((letrec-syntax ((keyword transformer-spec) ...) body1 body2 ...)
      ((lambda () (define-syntax keyword transformer-spec) ... body1 body2 ...))))

(define-syntax let-syntax
  (syntax-rules ()
    ((let-syntax ((keyword transformer-spec) ...) body1 body2 ...)
      (error "TODO: find out how to define let-syntax..."))))

(define-syntax let*
  (syntax-rules ()
    ((let* () body1 body2 ...)
      (let () body1 body2 ...))
    ((let* ((name1 val1) (name2 val2) ...) body1 body2 ...)
      (let ((name1 val1))
        (let* ((name2 val2) ...) body1 body2 ...)))))
        
(define-syntax letrec
  (syntax-rules ()
    ((letrec ((var1 init1) ...) body ...)
      (letrec "generate temp names" (var1 ...) () ((var1 init1) ...) body ...))
    ((letrec "generate temp names" () (temp1 ...) ((var1 init1) ...) body ...)
      (let ((var1 <undefined>) ...)
      (let ((temp1 init1) ...)
      (set! var1 temp1)
      ...
      body ...)))
    ((letrec "generate temp names" (x y ...) (temp ...) ((var1 init1) ...) body ...)
      (letrec "generate temp names"
        (y ...)
        (newtemp temp ...)
        ((var1 init1) ...)
        body ...))))

(define-syntax letrec*
  (syntax-rules ()
    ((letrec* ((var1 init1) ...) body1 body2 ...)
      (let ((var1 <undefined>) ...)
      (set! var1 init1)
      ...
      (let () body1 body2 ...)))))

(define-syntax let-values
  (syntax-rules ()
    ((let-values (binding ...) body0 body1 ...)
      (let-values "bind" (binding ...) () (begin body0 body1 ...)))
    ((let-values "bind" () tmps body)
      (let tmps body))
    ((let-values "bind" ((b0 e0) binding ...) tmps body)
      (let-values "mktmp" b0 e0 () (binding ...) tmps body))
    ((let-values "mktmp" () e0 args bindings tmps body)
      (call-with-values
        (lambda () e0)
        (lambda args
          (let-values "bind" bindings tmps body))))
    ((let-values "mktmp" (a . b) e0 (arg ...) bindings (tmp ...) body)
      (let-values "mktmp" b e0 (arg ... x) bindings (tmp ... (a x)) body))
    ((let-values "mktmp" a e0 (arg ...) bindings (tmp ...) body)
      (call-with-values
        (lambda () e0)
        (lambda (arg ... . x)
        (let-values "bind" bindings (tmp ... (a x)) body))))))

(define-syntax let*-values
  (syntax-rules ()
    ((let*-values () body0 body1 ...)
      (let () body0 body1 ...))
    ((let*-values (binding0 binding1 ...) body0 body1 ...)
      (let-values (binding0) (let*-values (binding1 ...) body0 body1 ...)))))

(define-syntax define-values
  (syntax-rules ()
    ((define-values () expr)
      (define dummy
        (call-with-values (lambda () expr) (lambda args #f))))
    ((define-values (var) expr)
      (define var expr))
    ((define-values (var0 var1 ... varn) expr)
      (begin
        (define var0 (call-with-values (lambda () expr) list))
        (define var1
          (let ((v (cadr var0)))
            (set-cdr! var0 (cddr var0)) v)) ...
        (define varn
          (let ((v (cadr var0)))
            (set! var0 (car var0)) v))))
    ((define-values (var0 var1 ... . varn) expr)
      (begin
        (define var0 (call-with-values (lambda () expr) list))
        (define var1
          (let ((v (cadr var0)))
            (set-cdr! var0 (cddr var0)) v)) ...
        (define varn
          (let ((v (cdr var0)))
            (set! var0 (car var0)) v))))
    ((define-values var expr)
      (define var (call-with-values (lambda () expr) list)))))
      
(define-syntax begin
  (syntax-rules ()
    ((begin exp ...)
      ((lambda () exp ...)))))

(define-syntax do
  (syntax-rules ()
    ((do ((var init step ...) ...) (test expr ...) command ...)
      (letrec
        ((loop
          (lambda (var ...)
            (if test
              (begin
                (if #f #f)
                expr ...)
              (begin
                command ...
                (loop (do "step" var step ...)...))))))
      (loop init ...)))
    ((do "step" x)
      x)
    ((do "step" x y)
      y)))

(define-syntax delay-force
  (syntax-rules ()
    ((delay-force expression)
      (make-promise #f (lambda () expression)))))
      
(define make-promise
  (lambda (done? proc)
    (list (cons done? proc))))

(define (force promise)
  (if (promise-done? promise)
    (promise-value promise)
    (let ((promise* ((promise-value promise))))
      (unless (promise-done? promise)
        (promise-update! promise* promise))
      (force promise))))

(define promise-done?
  (lambda (x) (car (car x))))
(define promise-value
  (lambda (x) (cdr (car x))))
(define promise-update!
  (lambda (new old)
    (set-car! (car old) (promise-done? new))
    (set-cdr! (car old) (promise-value new))
    (set-car! new (car old))))

(define (make-parameter init . o)
  (let* ((converter
          (if (pair? o) (car o) (lambda (x) x)))
           (value (converter init)))
    (lambda args
      (cond
        ((null? args)
          value)
        ((eq? (car args) <param-set!>)
          (set! value (cadr args)))
        ((eq? (car args) <param-convert>)
          converter)
        (else
          (error "bad parameter syntax"))))))

; TODO Parametrize
))
