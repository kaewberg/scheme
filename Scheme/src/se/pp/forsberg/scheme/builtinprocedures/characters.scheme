(define-library (scheme-impl characters)
  (import (scheme-impl base))
  (import (scheme-impl derived-expressions))
  (import (scheme-impl pairs-and-lists))
  (import (scheme-impl control))
  (import (scheme-impl booleans))

  (export char>? char>=? char-ci=? char-ci<? char-ci>? char-ci<=? char-ci>=?)

  (begin
      (define (char>? . x)     (if (or (null? x) (null? (cdr x))) #t (not (apply char<=? x))))
      (define (char>=? . x)    (if (or (null? x) (null? (cdr x))) #t (not (apply char<? x))))
      
      (define (char-ci=? . x)  (apply char=?  (map char-foldcase x)))
      (define (char-ci<? . x)  (apply char<?  (map char-foldcase x)))
      (define (char-ci>? . x)  (apply char>?  (map char-foldcase x)))
      (define (char-ci<=? . x) (apply char<=? (map char-foldcase x)))
      (define (char-ci>=? . x) (apply char>=? (map char-foldcase x)))
  )
)