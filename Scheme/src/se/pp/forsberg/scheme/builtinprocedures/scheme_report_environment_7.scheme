(define-library (scheme-impl scheme-report-environment 7)
  (import (scheme base))
  (import (scheme case-lambda))
  (import (scheme char))
  (import (scheme complex))
  (import (scheme cxr))
  (import (scheme eval))
  (import (scheme file))
  (import (scheme inexact))
  (import (scheme lazy))
  (import (scheme load))
  (import (scheme process-context))
  (import (scheme read))
  (import (scheme repl))
  (import (scheme time))
  (import (scheme write))
  
  (export * + - ... / < <= = => > >= abs and append apply assoc assq assv begin)
  (export binary-port? boolean=? boolean? bytevector bytevector-append bytevector-copy)
  (export bytevector-copy! bytevector-length bytevector-u8-ref bytevector-u8-set!)
  (export bytevector? caar cadr call-with-current-continuation call-with-port call-with-values)
  (export call/cc car case cdar cddr cdr ceiling char->integer char-ready? char<=?)
  (export char<? char=? char>=? char>? char? close-input-port close-output-port close-port)
  (export complex? cond cond-expand cons current-error-port current-input-port)
  (export current-output-port define define-record-type define-syntax define-values)
  (export denominator do dynamic-wind else eof-object eof-object? eq? equal? eqv?)
  (export error error-object-irritants error-object-message error-object? even?)
  (export exact exact-integer-sqrt exact-integer? exact? expt features file-error?)
  (export floor floor-quotient floor-remainder floor/ flush-output-port for-each)
  (export gcd get-output-bytevector get-output-string guard if include include-ci)
  (export inexact inexact? input-port-open? input-port? integer->char integer?)
  (export lambda lcm length let let* let*-values let-syntax let-values letrec)
  (export letrec* letrec-syntax list list->string list->vector list-copy list-ref)
  (export list-set! list-tail list? make-bytevector make-list make-parameter)
  (export make-string make-vector map max member memq memv min modulo negative?)
  (export newline not null? number->string number? numerator odd? open-input-bytevector)
  (export open-input-string open-output-bytevector open-output-string or output-port-open?)
  (export output-port? pair? parameterize peek-char peek-u8 port? positive? procedure?)
  (export quasiquote quote quotient raise raise-continuable rational? rationalize)
  (export read-bytevector read-bytevector! read-char read-error? read-line read-string)
  (export read-u8 real? remainder reverse round set! set-car! set-cdr! square string)
  (export string->list string->number string->symbol string->utf8 string->vector)
  (export string-append string-copy string-copy! string-fill! string-for-each string-length)
  (export string-map string-ref string-set! string<=? string<? string=? string>=? string>?)
  (export string? substring symbol->string symbol=? symbol? syntax-error syntax-rules)
  (export textual-port? truncate truncate-quotient truncate-remainder truncate/)
  (export u8-ready? unless unquote unquote-splicing utf8->string values vector)
  (export vector->list vector->string vector-append vector-copy vector-copy! vector-fill!)
  (export vector-for-each vector-length vector-map vector-ref vector-set! vector?)
  (export when with-exception-handler write-bytevector write-char write-string write-u8 zero?)
  
  (export case-lambda)
  (export char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>?
      char-downcase char-foldcase char-lower-case? char-numeric? char-upcase char-upper-case?
      char-whitespace? digit-value string-ci<=? string-ci<? string-ci=? string-ci>=?
      string-ci>? string-downcase string-foldcase string-upcase)
  (export angle imag-part magnitude make-polar make-rectangular real-part)
  (export caaar caadr cadar caddr cdaar cdadr cddar cdddr)
  (export caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr)
  (export cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr)
  (export environment eval)
  (export call-with-input-file call-with-output-file delete-file file-exists?
     open-binary-input-file open-binary-output-file open-input-file open-output-file
      with-input-from-file with-output-to-file)
  (export acos asin atan cos exp finite? infinite? log nan? sin sqrt tan)
  (export delay delay-force force make-promise promise?)
  (export load)
  (export command-line emergency-exit exit get-environment-variable get-environment-variables)
  (export read)
  (export interaction-environment)
  (export current-jiffy current-second jiffies-per-second)
  (export display write write-shared write-simple)
)